// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SSTIndex.proto

#include "SSTIndex.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_KeyValue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValue_KeyValue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_SSTIndex_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSTInfo_SSTIndex_2eproto;
namespace sstindex {
class SSTInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSTInfo> _instance;
} _SSTInfo_default_instance_;
class SSTIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SSTIndex> _instance;
} _SSTIndex_default_instance_;
}  // namespace sstindex
static void InitDefaultsscc_info_SSTIndex_SSTIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sstindex::_SSTIndex_default_instance_;
    new (ptr) ::sstindex::SSTIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sstindex::SSTIndex::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSTIndex_SSTIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSTIndex_SSTIndex_2eproto}, {
      &scc_info_SSTInfo_SSTIndex_2eproto.base,}};

static void InitDefaultsscc_info_SSTInfo_SSTIndex_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sstindex::_SSTInfo_default_instance_;
    new (ptr) ::sstindex::SSTInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sstindex::SSTInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SSTInfo_SSTIndex_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SSTInfo_SSTIndex_2eproto}, {
      &scc_info_KeyValue_KeyValue_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_SSTIndex_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_SSTIndex_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_SSTIndex_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_SSTIndex_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sstindex::SSTInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sstindex::SSTInfo, filename_),
  PROTOBUF_FIELD_OFFSET(::sstindex::SSTInfo, smallest_key_),
  PROTOBUF_FIELD_OFFSET(::sstindex::SSTInfo, largest_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sstindex::SSTIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sstindex::SSTIndex, sst_infos_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sstindex::SSTInfo)},
  { 8, -1, sizeof(::sstindex::SSTIndex)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sstindex::_SSTInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sstindex::_SSTIndex_default_instance_),
};

const char descriptor_table_protodef_SSTIndex_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016SSTIndex.proto\022\010sstindex\032\016KeyValue.pro"
  "to\"\\\n\007SSTInfo\022\020\n\010filename\030\001 \001(\t\022\037\n\014small"
  "est_key\030\002 \001(\0132\t.KeyValue\022\036\n\013largest_key\030"
  "\003 \001(\0132\t.KeyValue\"0\n\010SSTIndex\022$\n\tsst_info"
  "s\030\001 \003(\0132\021.sstindex.SSTInfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_SSTIndex_2eproto_deps[1] = {
  &::descriptor_table_KeyValue_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_SSTIndex_2eproto_sccs[2] = {
  &scc_info_SSTIndex_SSTIndex_2eproto.base,
  &scc_info_SSTInfo_SSTIndex_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_SSTIndex_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SSTIndex_2eproto = {
  false, false, descriptor_table_protodef_SSTIndex_2eproto, "SSTIndex.proto", 194,
  &descriptor_table_SSTIndex_2eproto_once, descriptor_table_SSTIndex_2eproto_sccs, descriptor_table_SSTIndex_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_SSTIndex_2eproto::offsets,
  file_level_metadata_SSTIndex_2eproto, 2, file_level_enum_descriptors_SSTIndex_2eproto, file_level_service_descriptors_SSTIndex_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_SSTIndex_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_SSTIndex_2eproto)), true);
namespace sstindex {

// ===================================================================

void SSTInfo::InitAsDefaultInstance() {
  ::sstindex::_SSTInfo_default_instance_._instance.get_mutable()->smallest_key_ = const_cast< ::KeyValue*>(
      ::KeyValue::internal_default_instance());
  ::sstindex::_SSTInfo_default_instance_._instance.get_mutable()->largest_key_ = const_cast< ::KeyValue*>(
      ::KeyValue::internal_default_instance());
}
class SSTInfo::_Internal {
 public:
  static const ::KeyValue& smallest_key(const SSTInfo* msg);
  static const ::KeyValue& largest_key(const SSTInfo* msg);
};

const ::KeyValue&
SSTInfo::_Internal::smallest_key(const SSTInfo* msg) {
  return *msg->smallest_key_;
}
const ::KeyValue&
SSTInfo::_Internal::largest_key(const SSTInfo* msg) {
  return *msg->largest_key_;
}
void SSTInfo::clear_smallest_key() {
  if (GetArena() == nullptr && smallest_key_ != nullptr) {
    delete smallest_key_;
  }
  smallest_key_ = nullptr;
}
void SSTInfo::clear_largest_key() {
  if (GetArena() == nullptr && largest_key_ != nullptr) {
    delete largest_key_;
  }
  largest_key_ = nullptr;
}
SSTInfo::SSTInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sstindex.SSTInfo)
}
SSTInfo::SSTInfo(const SSTInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filename(),
      GetArena());
  }
  if (from._internal_has_smallest_key()) {
    smallest_key_ = new ::KeyValue(*from.smallest_key_);
  } else {
    smallest_key_ = nullptr;
  }
  if (from._internal_has_largest_key()) {
    largest_key_ = new ::KeyValue(*from.largest_key_);
  } else {
    largest_key_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sstindex.SSTInfo)
}

void SSTInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSTInfo_SSTIndex_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&smallest_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&largest_key_) -
      reinterpret_cast<char*>(&smallest_key_)) + sizeof(largest_key_));
}

SSTInfo::~SSTInfo() {
  // @@protoc_insertion_point(destructor:sstindex.SSTInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSTInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete smallest_key_;
  if (this != internal_default_instance()) delete largest_key_;
}

void SSTInfo::ArenaDtor(void* object) {
  SSTInfo* _this = reinterpret_cast< SSTInfo* >(object);
  (void)_this;
}
void SSTInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSTInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSTInfo& SSTInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSTInfo_SSTIndex_2eproto.base);
  return *internal_default_instance();
}


void SSTInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sstindex.SSTInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && smallest_key_ != nullptr) {
    delete smallest_key_;
  }
  smallest_key_ = nullptr;
  if (GetArena() == nullptr && largest_key_ != nullptr) {
    delete largest_key_;
  }
  largest_key_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSTInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sstindex.SSTInfo.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KeyValue smallest_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_smallest_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KeyValue largest_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_largest_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSTInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sstindex.SSTInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sstindex.SSTInfo.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // .KeyValue smallest_key = 2;
  if (this->has_smallest_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::smallest_key(this), target, stream);
  }

  // .KeyValue largest_key = 3;
  if (this->has_largest_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::largest_key(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sstindex.SSTInfo)
  return target;
}

size_t SSTInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sstindex.SSTInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // .KeyValue smallest_key = 2;
  if (this->has_smallest_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *smallest_key_);
  }

  // .KeyValue largest_key = 3;
  if (this->has_largest_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *largest_key_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSTInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sstindex.SSTInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SSTInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSTInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sstindex.SSTInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sstindex.SSTInfo)
    MergeFrom(*source);
  }
}

void SSTInfo::MergeFrom(const SSTInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sstindex.SSTInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
  if (from.has_smallest_key()) {
    _internal_mutable_smallest_key()->::KeyValue::MergeFrom(from._internal_smallest_key());
  }
  if (from.has_largest_key()) {
    _internal_mutable_largest_key()->::KeyValue::MergeFrom(from._internal_largest_key());
  }
}

void SSTInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sstindex.SSTInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSTInfo::CopyFrom(const SSTInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sstindex.SSTInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSTInfo::IsInitialized() const {
  return true;
}

void SSTInfo::InternalSwap(SSTInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SSTInfo, largest_key_)
      + sizeof(SSTInfo::largest_key_)
      - PROTOBUF_FIELD_OFFSET(SSTInfo, smallest_key_)>(
          reinterpret_cast<char*>(&smallest_key_),
          reinterpret_cast<char*>(&other->smallest_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SSTInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SSTIndex::InitAsDefaultInstance() {
}
class SSTIndex::_Internal {
 public:
};

SSTIndex::SSTIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sst_infos_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sstindex.SSTIndex)
}
SSTIndex::SSTIndex(const SSTIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sst_infos_(from.sst_infos_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sstindex.SSTIndex)
}

void SSTIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SSTIndex_SSTIndex_2eproto.base);
}

SSTIndex::~SSTIndex() {
  // @@protoc_insertion_point(destructor:sstindex.SSTIndex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SSTIndex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SSTIndex::ArenaDtor(void* object) {
  SSTIndex* _this = reinterpret_cast< SSTIndex* >(object);
  (void)_this;
}
void SSTIndex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SSTIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SSTIndex& SSTIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SSTIndex_SSTIndex_2eproto.base);
  return *internal_default_instance();
}


void SSTIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:sstindex.SSTIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sst_infos_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SSTIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sstindex.SSTInfo sst_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sst_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SSTIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sstindex.SSTIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sstindex.SSTInfo sst_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sst_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_sst_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sstindex.SSTIndex)
  return target;
}

size_t SSTIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sstindex.SSTIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sstindex.SSTInfo sst_infos = 1;
  total_size += 1UL * this->_internal_sst_infos_size();
  for (const auto& msg : this->sst_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SSTIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sstindex.SSTIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const SSTIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SSTIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sstindex.SSTIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sstindex.SSTIndex)
    MergeFrom(*source);
  }
}

void SSTIndex::MergeFrom(const SSTIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sstindex.SSTIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sst_infos_.MergeFrom(from.sst_infos_);
}

void SSTIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sstindex.SSTIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSTIndex::CopyFrom(const SSTIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sstindex.SSTIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSTIndex::IsInitialized() const {
  return true;
}

void SSTIndex::InternalSwap(SSTIndex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sst_infos_.InternalSwap(&other->sst_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SSTIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sstindex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sstindex::SSTInfo* Arena::CreateMaybeMessage< ::sstindex::SSTInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sstindex::SSTInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sstindex::SSTIndex* Arena::CreateMaybeMessage< ::sstindex::SSTIndex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sstindex::SSTIndex >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
