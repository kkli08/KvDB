// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeyValue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KeyValue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KeyValue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KeyValue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KeyValue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KeyValue_2eproto;
class KeyValue;
class KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::KeyValue* Arena::CreateMaybeMessage<::KeyValue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum KeyValue_KeyValueType : int {
  KeyValue_KeyValueType_INT = 0,
  KeyValue_KeyValueType_LONG = 1,
  KeyValue_KeyValueType_DOUBLE = 2,
  KeyValue_KeyValueType_CHAR = 3,
  KeyValue_KeyValueType_STRING = 4,
  KeyValue_KeyValueType_KeyValue_KeyValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KeyValue_KeyValueType_KeyValue_KeyValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KeyValue_KeyValueType_IsValid(int value);
constexpr KeyValue_KeyValueType KeyValue_KeyValueType_KeyValueType_MIN = KeyValue_KeyValueType_INT;
constexpr KeyValue_KeyValueType KeyValue_KeyValueType_KeyValueType_MAX = KeyValue_KeyValueType_STRING;
constexpr int KeyValue_KeyValueType_KeyValueType_ARRAYSIZE = KeyValue_KeyValueType_KeyValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeyValue_KeyValueType_descriptor();
template<typename T>
inline const std::string& KeyValue_KeyValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyValue_KeyValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyValue_KeyValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KeyValue_KeyValueType_descriptor(), enum_t_value);
}
inline bool KeyValue_KeyValueType_Parse(
    const std::string& name, KeyValue_KeyValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KeyValue_KeyValueType>(
    KeyValue_KeyValueType_descriptor(), name, value);
}
// ===================================================================

class KeyValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {};
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);
  KeyValue(KeyValue&& from) noexcept
    : KeyValue() {
    *this = ::std::move(from);
  }

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValue& default_instance();

  enum KeyCase {
    kIntKey = 1,
    kLongKey = 2,
    kDoubleKey = 3,
    kStringKey = 4,
    kCharKey = 5,
    KEY_NOT_SET = 0,
  };

  enum ValueCase {
    kIntValue = 6,
    kLongValue = 7,
    kDoubleValue = 8,
    kStringValue = 9,
    kCharValue = 10,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
               &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValue& a, KeyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValue* New() const final {
    return CreateMaybeMessage<KeyValue>(nullptr);
  }

  KeyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KeyValue";
  }
  protected:
  explicit KeyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KeyValue_2eproto);
    return ::descriptor_table_KeyValue_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef KeyValue_KeyValueType KeyValueType;
  static constexpr KeyValueType INT =
    KeyValue_KeyValueType_INT;
  static constexpr KeyValueType LONG =
    KeyValue_KeyValueType_LONG;
  static constexpr KeyValueType DOUBLE =
    KeyValue_KeyValueType_DOUBLE;
  static constexpr KeyValueType CHAR =
    KeyValue_KeyValueType_CHAR;
  static constexpr KeyValueType STRING =
    KeyValue_KeyValueType_STRING;
  static inline bool KeyValueType_IsValid(int value) {
    return KeyValue_KeyValueType_IsValid(value);
  }
  static constexpr KeyValueType KeyValueType_MIN =
    KeyValue_KeyValueType_KeyValueType_MIN;
  static constexpr KeyValueType KeyValueType_MAX =
    KeyValue_KeyValueType_KeyValueType_MAX;
  static constexpr int KeyValueType_ARRAYSIZE =
    KeyValue_KeyValueType_KeyValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KeyValueType_descriptor() {
    return KeyValue_KeyValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& KeyValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KeyValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KeyValueType_Name.");
    return KeyValue_KeyValueType_Name(enum_t_value);
  }
  static inline bool KeyValueType_Parse(const std::string& name,
      KeyValueType* value) {
    return KeyValue_KeyValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyTypeFieldNumber = 11,
    kValueTypeFieldNumber = 12,
    kIntKeyFieldNumber = 1,
    kLongKeyFieldNumber = 2,
    kDoubleKeyFieldNumber = 3,
    kStringKeyFieldNumber = 4,
    kCharKeyFieldNumber = 5,
    kIntValueFieldNumber = 6,
    kLongValueFieldNumber = 7,
    kDoubleValueFieldNumber = 8,
    kStringValueFieldNumber = 9,
    kCharValueFieldNumber = 10,
  };
  // .KeyValue.KeyValueType key_type = 11;
  void clear_key_type();
  ::KeyValue_KeyValueType key_type() const;
  void set_key_type(::KeyValue_KeyValueType value);
  private:
  ::KeyValue_KeyValueType _internal_key_type() const;
  void _internal_set_key_type(::KeyValue_KeyValueType value);
  public:

  // .KeyValue.KeyValueType value_type = 12;
  void clear_value_type();
  ::KeyValue_KeyValueType value_type() const;
  void set_value_type(::KeyValue_KeyValueType value);
  private:
  ::KeyValue_KeyValueType _internal_value_type() const;
  void _internal_set_value_type(::KeyValue_KeyValueType value);
  public:

  // int32 int_key = 1;
  private:
  bool _internal_has_int_key() const;
  public:
  void clear_int_key();
  ::PROTOBUF_NAMESPACE_ID::int32 int_key() const;
  void set_int_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_key() const;
  void _internal_set_int_key(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 long_key = 2;
  private:
  bool _internal_has_long_key() const;
  public:
  void clear_long_key();
  ::PROTOBUF_NAMESPACE_ID::int64 long_key() const;
  void set_long_key(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_long_key() const;
  void _internal_set_long_key(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double double_key = 3;
  private:
  bool _internal_has_double_key() const;
  public:
  void clear_double_key();
  double double_key() const;
  void set_double_key(double value);
  private:
  double _internal_double_key() const;
  void _internal_set_double_key(double value);
  public:

  // string string_key = 4;
  private:
  bool _internal_has_string_key() const;
  public:
  void clear_string_key();
  const std::string& string_key() const;
  void set_string_key(const std::string& value);
  void set_string_key(std::string&& value);
  void set_string_key(const char* value);
  void set_string_key(const char* value, size_t size);
  std::string* mutable_string_key();
  std::string* release_string_key();
  void set_allocated_string_key(std::string* string_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string_key(
      std::string* string_key);
  private:
  const std::string& _internal_string_key() const;
  void _internal_set_string_key(const std::string& value);
  std::string* _internal_mutable_string_key();
  public:

  // string char_key = 5;
  private:
  bool _internal_has_char_key() const;
  public:
  void clear_char_key();
  const std::string& char_key() const;
  void set_char_key(const std::string& value);
  void set_char_key(std::string&& value);
  void set_char_key(const char* value);
  void set_char_key(const char* value, size_t size);
  std::string* mutable_char_key();
  std::string* release_char_key();
  void set_allocated_char_key(std::string* char_key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_char_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_char_key(
      std::string* char_key);
  private:
  const std::string& _internal_char_key() const;
  void _internal_set_char_key(const std::string& value);
  std::string* _internal_mutable_char_key();
  public:

  // int32 int_value = 6;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 long_value = 7;
  private:
  bool _internal_has_long_value() const;
  public:
  void clear_long_value();
  ::PROTOBUF_NAMESPACE_ID::int64 long_value() const;
  void set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_long_value() const;
  void _internal_set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double double_value = 8;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // string string_value = 9;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_string_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_string_value(
      std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // string char_value = 10;
  private:
  bool _internal_has_char_value() const;
  public:
  void clear_char_value();
  const std::string& char_value() const;
  void set_char_value(const std::string& value);
  void set_char_value(std::string&& value);
  void set_char_value(const char* value);
  void set_char_value(const char* value, size_t size);
  std::string* mutable_char_value();
  std::string* release_char_value();
  void set_allocated_char_value(std::string* char_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_char_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_char_value(
      std::string* char_value);
  private:
  const std::string& _internal_char_value() const;
  void _internal_set_char_value(const std::string& value);
  std::string* _internal_mutable_char_value();
  public:

  void clear_key();
  KeyCase key_case() const;
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:KeyValue)
 private:
  class _Internal;
  void set_has_int_key();
  void set_has_long_key();
  void set_has_double_key();
  void set_has_string_key();
  void set_has_char_key();
  void set_has_int_value();
  void set_has_long_value();
  void set_has_double_value();
  void set_has_string_value();
  void set_has_char_value();

  inline bool has_key() const;
  inline void clear_has_key();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int key_type_;
  int value_type_;
  union KeyUnion {
    KeyUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 int_key_;
    ::PROTOBUF_NAMESPACE_ID::int64 long_key_;
    double double_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr char_key_;
  } key_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int32 int_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 long_value_;
    double double_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr char_value_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_KeyValue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValue

// int32 int_key = 1;
inline bool KeyValue::_internal_has_int_key() const {
  return key_case() == kIntKey;
}
inline void KeyValue::set_has_int_key() {
  _oneof_case_[0] = kIntKey;
}
inline void KeyValue::clear_int_key() {
  if (_internal_has_int_key()) {
    key_.int_key_ = 0;
    clear_has_key();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyValue::_internal_int_key() const {
  if (_internal_has_int_key()) {
    return key_.int_key_;
  }
  return 0;
}
inline void KeyValue::_internal_set_int_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int_key()) {
    clear_key();
    set_has_int_key();
  }
  key_.int_key_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyValue::int_key() const {
  // @@protoc_insertion_point(field_get:KeyValue.int_key)
  return _internal_int_key();
}
inline void KeyValue::set_int_key(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_key(value);
  // @@protoc_insertion_point(field_set:KeyValue.int_key)
}

// int64 long_key = 2;
inline bool KeyValue::_internal_has_long_key() const {
  return key_case() == kLongKey;
}
inline void KeyValue::set_has_long_key() {
  _oneof_case_[0] = kLongKey;
}
inline void KeyValue::clear_long_key() {
  if (_internal_has_long_key()) {
    key_.long_key_ = PROTOBUF_LONGLONG(0);
    clear_has_key();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::_internal_long_key() const {
  if (_internal_has_long_key()) {
    return key_.long_key_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void KeyValue::_internal_set_long_key(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_long_key()) {
    clear_key();
    set_has_long_key();
  }
  key_.long_key_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::long_key() const {
  // @@protoc_insertion_point(field_get:KeyValue.long_key)
  return _internal_long_key();
}
inline void KeyValue::set_long_key(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_long_key(value);
  // @@protoc_insertion_point(field_set:KeyValue.long_key)
}

// double double_key = 3;
inline bool KeyValue::_internal_has_double_key() const {
  return key_case() == kDoubleKey;
}
inline void KeyValue::set_has_double_key() {
  _oneof_case_[0] = kDoubleKey;
}
inline void KeyValue::clear_double_key() {
  if (_internal_has_double_key()) {
    key_.double_key_ = 0;
    clear_has_key();
  }
}
inline double KeyValue::_internal_double_key() const {
  if (_internal_has_double_key()) {
    return key_.double_key_;
  }
  return 0;
}
inline void KeyValue::_internal_set_double_key(double value) {
  if (!_internal_has_double_key()) {
    clear_key();
    set_has_double_key();
  }
  key_.double_key_ = value;
}
inline double KeyValue::double_key() const {
  // @@protoc_insertion_point(field_get:KeyValue.double_key)
  return _internal_double_key();
}
inline void KeyValue::set_double_key(double value) {
  _internal_set_double_key(value);
  // @@protoc_insertion_point(field_set:KeyValue.double_key)
}

// string string_key = 4;
inline bool KeyValue::_internal_has_string_key() const {
  return key_case() == kStringKey;
}
inline void KeyValue::set_has_string_key() {
  _oneof_case_[0] = kStringKey;
}
inline void KeyValue::clear_string_key() {
  if (_internal_has_string_key()) {
    key_.string_key_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_key();
  }
}
inline const std::string& KeyValue::string_key() const {
  // @@protoc_insertion_point(field_get:KeyValue.string_key)
  return _internal_string_key();
}
inline void KeyValue::set_string_key(const std::string& value) {
  _internal_set_string_key(value);
  // @@protoc_insertion_point(field_set:KeyValue.string_key)
}
inline std::string* KeyValue::mutable_string_key() {
  // @@protoc_insertion_point(field_mutable:KeyValue.string_key)
  return _internal_mutable_string_key();
}
inline const std::string& KeyValue::_internal_string_key() const {
  if (_internal_has_string_key()) {
    return key_.string_key_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KeyValue::_internal_set_string_key(const std::string& value) {
  if (!_internal_has_string_key()) {
    clear_key();
    set_has_string_key();
    key_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.string_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_string_key(std::string&& value) {
  // @@protoc_insertion_point(field_set:KeyValue.string_key)
  if (!_internal_has_string_key()) {
    clear_key();
    set_has_string_key();
    key_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.string_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KeyValue.string_key)
}
inline void KeyValue::set_string_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_key()) {
    clear_key();
    set_has_string_key();
    key_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.string_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KeyValue.string_key)
}
inline void KeyValue::set_string_key(const char* value,
                             size_t size) {
  if (!_internal_has_string_key()) {
    clear_key();
    set_has_string_key();
    key_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.string_key_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:KeyValue.string_key)
}
inline std::string* KeyValue::_internal_mutable_string_key() {
  if (!_internal_has_string_key()) {
    clear_key();
    set_has_string_key();
    key_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return key_.string_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_string_key() {
  // @@protoc_insertion_point(field_release:KeyValue.string_key)
  if (_internal_has_string_key()) {
    clear_has_key();
    return key_.string_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void KeyValue::set_allocated_string_key(std::string* string_key) {
  if (has_key()) {
    clear_key();
  }
  if (string_key != nullptr) {
    set_has_string_key();
    key_.string_key_.UnsafeSetDefault(string_key);
  }
  // @@protoc_insertion_point(field_set_allocated:KeyValue.string_key)
}
inline std::string* KeyValue::unsafe_arena_release_string_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KeyValue.string_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_string_key()) {
    clear_has_key();
    return key_.string_key_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void KeyValue::unsafe_arena_set_allocated_string_key(std::string* string_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_string_key()) {
    key_.string_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_key();
  if (string_key) {
    set_has_string_key();
    key_.string_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_key, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KeyValue.string_key)
}

// string char_key = 5;
inline bool KeyValue::_internal_has_char_key() const {
  return key_case() == kCharKey;
}
inline void KeyValue::set_has_char_key() {
  _oneof_case_[0] = kCharKey;
}
inline void KeyValue::clear_char_key() {
  if (_internal_has_char_key()) {
    key_.char_key_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_key();
  }
}
inline const std::string& KeyValue::char_key() const {
  // @@protoc_insertion_point(field_get:KeyValue.char_key)
  return _internal_char_key();
}
inline void KeyValue::set_char_key(const std::string& value) {
  _internal_set_char_key(value);
  // @@protoc_insertion_point(field_set:KeyValue.char_key)
}
inline std::string* KeyValue::mutable_char_key() {
  // @@protoc_insertion_point(field_mutable:KeyValue.char_key)
  return _internal_mutable_char_key();
}
inline const std::string& KeyValue::_internal_char_key() const {
  if (_internal_has_char_key()) {
    return key_.char_key_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KeyValue::_internal_set_char_key(const std::string& value) {
  if (!_internal_has_char_key()) {
    clear_key();
    set_has_char_key();
    key_.char_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.char_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_char_key(std::string&& value) {
  // @@protoc_insertion_point(field_set:KeyValue.char_key)
  if (!_internal_has_char_key()) {
    clear_key();
    set_has_char_key();
    key_.char_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.char_key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KeyValue.char_key)
}
inline void KeyValue::set_char_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_char_key()) {
    clear_key();
    set_has_char_key();
    key_.char_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.char_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KeyValue.char_key)
}
inline void KeyValue::set_char_key(const char* value,
                             size_t size) {
  if (!_internal_has_char_key()) {
    clear_key();
    set_has_char_key();
    key_.char_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  key_.char_key_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:KeyValue.char_key)
}
inline std::string* KeyValue::_internal_mutable_char_key() {
  if (!_internal_has_char_key()) {
    clear_key();
    set_has_char_key();
    key_.char_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return key_.char_key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_char_key() {
  // @@protoc_insertion_point(field_release:KeyValue.char_key)
  if (_internal_has_char_key()) {
    clear_has_key();
    return key_.char_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void KeyValue::set_allocated_char_key(std::string* char_key) {
  if (has_key()) {
    clear_key();
  }
  if (char_key != nullptr) {
    set_has_char_key();
    key_.char_key_.UnsafeSetDefault(char_key);
  }
  // @@protoc_insertion_point(field_set_allocated:KeyValue.char_key)
}
inline std::string* KeyValue::unsafe_arena_release_char_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KeyValue.char_key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_char_key()) {
    clear_has_key();
    return key_.char_key_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void KeyValue::unsafe_arena_set_allocated_char_key(std::string* char_key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_char_key()) {
    key_.char_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_key();
  if (char_key) {
    set_has_char_key();
    key_.char_key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), char_key, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KeyValue.char_key)
}

// int32 int_value = 6;
inline bool KeyValue::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline void KeyValue::set_has_int_value() {
  _oneof_case_[1] = kIntValue;
}
inline void KeyValue::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyValue::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return 0;
}
inline void KeyValue::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyValue::int_value() const {
  // @@protoc_insertion_point(field_get:KeyValue.int_value)
  return _internal_int_value();
}
inline void KeyValue::set_int_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:KeyValue.int_value)
}

// int64 long_value = 7;
inline bool KeyValue::_internal_has_long_value() const {
  return value_case() == kLongValue;
}
inline void KeyValue::set_has_long_value() {
  _oneof_case_[1] = kLongValue;
}
inline void KeyValue::clear_long_value() {
  if (_internal_has_long_value()) {
    value_.long_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::_internal_long_value() const {
  if (_internal_has_long_value()) {
    return value_.long_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void KeyValue::_internal_set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_long_value()) {
    clear_value();
    set_has_long_value();
  }
  value_.long_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyValue::long_value() const {
  // @@protoc_insertion_point(field_get:KeyValue.long_value)
  return _internal_long_value();
}
inline void KeyValue::set_long_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_long_value(value);
  // @@protoc_insertion_point(field_set:KeyValue.long_value)
}

// double double_value = 8;
inline bool KeyValue::_internal_has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void KeyValue::set_has_double_value() {
  _oneof_case_[1] = kDoubleValue;
}
inline void KeyValue::clear_double_value() {
  if (_internal_has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double KeyValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void KeyValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
}
inline double KeyValue::double_value() const {
  // @@protoc_insertion_point(field_get:KeyValue.double_value)
  return _internal_double_value();
}
inline void KeyValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:KeyValue.double_value)
}

// string string_value = 9;
inline bool KeyValue::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline void KeyValue::set_has_string_value() {
  _oneof_case_[1] = kStringValue;
}
inline void KeyValue::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& KeyValue::string_value() const {
  // @@protoc_insertion_point(field_get:KeyValue.string_value)
  return _internal_string_value();
}
inline void KeyValue::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:KeyValue.string_value)
}
inline std::string* KeyValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:KeyValue.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& KeyValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KeyValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:KeyValue.string_value)
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KeyValue.string_value)
}
inline void KeyValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KeyValue.string_value)
}
inline void KeyValue::set_string_value(const char* value,
                             size_t size) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:KeyValue.string_value)
}
inline std::string* KeyValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_string_value() {
  // @@protoc_insertion_point(field_release:KeyValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void KeyValue::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:KeyValue.string_value)
}
inline std::string* KeyValue::unsafe_arena_release_string_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KeyValue.string_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void KeyValue::unsafe_arena_set_allocated_string_value(std::string* string_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_string_value()) {
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (string_value) {
    set_has_string_value();
    value_.string_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_value, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KeyValue.string_value)
}

// string char_value = 10;
inline bool KeyValue::_internal_has_char_value() const {
  return value_case() == kCharValue;
}
inline void KeyValue::set_has_char_value() {
  _oneof_case_[1] = kCharValue;
}
inline void KeyValue::clear_char_value() {
  if (_internal_has_char_value()) {
    value_.char_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& KeyValue::char_value() const {
  // @@protoc_insertion_point(field_get:KeyValue.char_value)
  return _internal_char_value();
}
inline void KeyValue::set_char_value(const std::string& value) {
  _internal_set_char_value(value);
  // @@protoc_insertion_point(field_set:KeyValue.char_value)
}
inline std::string* KeyValue::mutable_char_value() {
  // @@protoc_insertion_point(field_mutable:KeyValue.char_value)
  return _internal_mutable_char_value();
}
inline const std::string& KeyValue::_internal_char_value() const {
  if (_internal_has_char_value()) {
    return value_.char_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void KeyValue::_internal_set_char_value(const std::string& value) {
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.char_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KeyValue::set_char_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:KeyValue.char_value)
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.char_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:KeyValue.char_value)
}
inline void KeyValue::set_char_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.char_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:KeyValue.char_value)
}
inline void KeyValue::set_char_value(const char* value,
                             size_t size) {
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.char_value_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:KeyValue.char_value)
}
inline std::string* KeyValue::_internal_mutable_char_value() {
  if (!_internal_has_char_value()) {
    clear_value();
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.char_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KeyValue::release_char_value() {
  // @@protoc_insertion_point(field_release:KeyValue.char_value)
  if (_internal_has_char_value()) {
    clear_has_value();
    return value_.char_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void KeyValue::set_allocated_char_value(std::string* char_value) {
  if (has_value()) {
    clear_value();
  }
  if (char_value != nullptr) {
    set_has_char_value();
    value_.char_value_.UnsafeSetDefault(char_value);
  }
  // @@protoc_insertion_point(field_set_allocated:KeyValue.char_value)
}
inline std::string* KeyValue::unsafe_arena_release_char_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KeyValue.char_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_char_value()) {
    clear_has_value();
    return value_.char_value_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void KeyValue::unsafe_arena_set_allocated_char_value(std::string* char_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_char_value()) {
    value_.char_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_value();
  if (char_value) {
    set_has_char_value();
    value_.char_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), char_value, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KeyValue.char_value)
}

// .KeyValue.KeyValueType key_type = 11;
inline void KeyValue::clear_key_type() {
  key_type_ = 0;
}
inline ::KeyValue_KeyValueType KeyValue::_internal_key_type() const {
  return static_cast< ::KeyValue_KeyValueType >(key_type_);
}
inline ::KeyValue_KeyValueType KeyValue::key_type() const {
  // @@protoc_insertion_point(field_get:KeyValue.key_type)
  return _internal_key_type();
}
inline void KeyValue::_internal_set_key_type(::KeyValue_KeyValueType value) {
  
  key_type_ = value;
}
inline void KeyValue::set_key_type(::KeyValue_KeyValueType value) {
  _internal_set_key_type(value);
  // @@protoc_insertion_point(field_set:KeyValue.key_type)
}

// .KeyValue.KeyValueType value_type = 12;
inline void KeyValue::clear_value_type() {
  value_type_ = 0;
}
inline ::KeyValue_KeyValueType KeyValue::_internal_value_type() const {
  return static_cast< ::KeyValue_KeyValueType >(value_type_);
}
inline ::KeyValue_KeyValueType KeyValue::value_type() const {
  // @@protoc_insertion_point(field_get:KeyValue.value_type)
  return _internal_value_type();
}
inline void KeyValue::_internal_set_value_type(::KeyValue_KeyValueType value) {
  
  value_type_ = value;
}
inline void KeyValue::set_value_type(::KeyValue_KeyValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:KeyValue.value_type)
}

inline bool KeyValue::has_key() const {
  return key_case() != KEY_NOT_SET;
}
inline void KeyValue::clear_has_key() {
  _oneof_case_[0] = KEY_NOT_SET;
}
inline bool KeyValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void KeyValue::clear_has_value() {
  _oneof_case_[1] = VALUE_NOT_SET;
}
inline KeyValue::KeyCase KeyValue::key_case() const {
  return KeyValue::KeyCase(_oneof_case_[0]);
}
inline KeyValue::ValueCase KeyValue::value_case() const {
  return KeyValue::ValueCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KeyValue_KeyValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KeyValue_KeyValueType>() {
  return ::KeyValue_KeyValueType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KeyValue_2eproto
